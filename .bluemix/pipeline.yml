---
stages:
- name: BUILD
  inputs:
  - service: ${REPO}
    type: git
    branch: master
    dir_name: null
  triggers:
  - type: commit
  jobs:
  - name: Build Docker Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${IMAGE_NAME}
    USE_CACHED_LAYERS: 'true'
    COMMAND: "#!/bin/bash\n# The following colors have been defined to help with presentation\
      \ of logs: green, red, label_color, no_color.  \nlog_and_echo \"$LABEL\" \"\
      Starting build script\"\n\nexport JAVA_HOME=~/java8\n\n./gradlew build docker\n\
      \ncat build.gradle\n\nls -l build/libs/\nls -l docker/\nls -l .\n\ncp -r docker/*\
      \ .\n\nls -l .\n\nfind .\n\n# The IBM Container BM Containers plug-in (cf ic),\
      \ Git client (git), and IDS Inventory CLI (ids-inv) have been installed.\n#\
      \ Based on the organization and space selected in the Job credentials are in\
      \ place for both IBM Container Service and IBM Bluemix \n#####################\n\
      # Run unit tests    #\n#####################\nlog_and_echo \"$LABEL\" \"No unit\
      \ tests cases have been checked in\"\n\nSPACE=$($IC_COMMAND info|grep 'Bluemix\
      \ Space'|awk '{print $NF}'|sed \"s/\\(.*\\)\\((.*\\)/\\1/\")\nIMAGE_NAME=$(echo\
      \ $IMAGE_NAME|sed \"s/-$SPACE//\")\nREGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n\
      FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}\n\n######################################\n\
      # Build Container via Dockerfile     #\n######################################\n\
      \n# REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n# FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}\n\
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property\
      \ on the stage.\n\nif [ -f Dockerfile ]; then \n    log_and_echo \"$LABEL\"\
      \ \"Building ${FULL_REPOSITORY_NAME}\"\n    ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l info -m \"New container build requested for ${FULL_REPOSITORY_NAME}\"\n\
      \    # build image\n    BUILD_COMMAND=\"\"\n    if [ \"${USE_CACHED_LAYERS}\"\
      \ == \"true\" ]; then \n        BUILD_COMMAND=\"build --pull --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n  \
      \  else \n        BUILD_COMMAND=\"build --no-cache --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n  \
      \  fi \n\n    if [ $RESULT -ne 0 ]; then\n        log_and_echo \"$ERROR\" \"\
      Error building image\"\n        ice_retry info \n        ice_retry images\n\
      \        ${EXT_DIR}/print_help.sh\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l bad -m \"Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)\"\
      \n        exit 1\n    else\n        log_and_echo \"$SUCCESSFUL\" \"Container\
      \ build of ${FULL_REPOSITORY_NAME} was successful\"\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l good -m \"Container build of ${FULL_REPOSITORY_NAME} was successful\"\n\
      \    fi  \nelse \n    log_and_echo \"$ERROR\" \"Dockerfile not found in project\"\
      \n    ${EXT_DIR}/utilities/sendMessage.sh -l bad -m \"Failed to get Dockerfile.\
      \ $(get_error_info)\"\n    exit 1\nfi  \n\n######################################################################################\n\
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE\
      \    #\n######################################################################################\n\
      echo \"IMAGE_NAME=${FULL_REPOSITORY_NAME}\" >> $ARCHIVE_DIR/build.properties"
- name: DEPLOY
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker Image
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: MIN_INSTANCES
    value: ${MIN_INSTANCES}
    type: text
  - name: MAX_INSTANCES
    value: ${MAX_INSTANCES}
    type: text
  - name: DESIRED_INSTANCES
    value: ${DESIRED_INSTANCES}
    type: text
  - name: APP_NAME
    value: ${APP_NAME}
    type: text
  - name: MEMORY
    value: ${MEMORY}
    type: text
  - name: CONTAINER_SIZE
    value: ${MEMORY}
    type: text
  - name: EUREKA_REGISTRY_URL
    value: ${EUREKA_REGISTRY_URL}
    type: text
  - name: NEW_RELIC_LICENSE_KEY
    value: ${NEW_RELIC_LICENSE}
    type: text
  - name: ROUTE_HOSTNAME
    value: ${NAME}
    type: text
  - name: ROUTE_DOMAIN
    value: ${ROUTE_DOMAIN}
    type: text
  jobs:
  - name: Deploy
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    OPTIONAL_ARGS: -m ${MEMORY}
    CONTAINER_NAME: ${NAME}
    DEPLOY_TYPE: red_black
    COMMAND: |-
      #!/bin/bash
      # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
      echo -e "${label_color}Starting deployment script${no_color}"

      OPTIONAL_ARGS="${OPTIONAL_ARGS} \
            -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} \
            -e eureka.client.fetchRegistry=true \
            -e eureka.client.registerWithEureka=false \
            -e "spring.application.name=${APP_NAME}" \
            -e "eureka.client.serviceUrl.defaultZone=${EUREKA_REGISTRY_URL}""

      # To view/fork this script goto: https://github.com/Osthanes/deployscripts
      # git_retry will retry git calls to prevent pipeline failure on temporary github problems
      # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
      git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts

      # Deploy Container Group:
      # Optional environment properties (can be set directly in this script, or defined as environment properties):
      #      NAME              Value         Description
      #   =============      =========     ==============
      #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   ROUTE_DOMAIN        String       Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
      #   DESIRED_INSTANCES:  Number       Specify the number of instances in the group.  Default value is 1.
      #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default value is false.

      #                                    Default is false.
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
      #                                                            large (4096), x-large (8192), 2x-large (16384).
      #                                    Default is micro (256).
      #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
      #                                    Default is 1
      # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
      /bin/bash deployscripts/deploygroup.sh

      RESULT=$?

      # source the deploy property file
      if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
        source "$DEPLOY_PROPERTY_FILE"
      fi

      #########################
      # Environment DETAILS   #
      #########################
      # The environment has been setup.
      # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
      fi
      echo -e "${green}Execution complete${no_label}"
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
